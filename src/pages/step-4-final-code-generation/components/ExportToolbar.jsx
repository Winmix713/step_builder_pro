import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';

const ExportToolbar = ({ activeFormat, onFormatChange, onExport, onOptimize, generatedCode }) => {
  const [exportOptions, setExportOptions] = useState({
    minify: true,
    includeComments: false,
    bundleAssets: true,
    generateReadme: true
  });

  const [isExporting, setIsExporting] = useState(false);
  const [optimizationLevel, setOptimizationLevel] = useState('standard');

  const formats = [
    { id: 'react', label: 'React', icon: 'Component', color: 'blue' },
    { id: 'html', label: 'HTML/CSS', icon: 'Code', color: 'orange' },
    { id: 'vue', label: 'Vue.js', icon: 'Layers', color: 'green' },
    { id: 'angular', label: 'Angular', icon: 'Triangle', color: 'red' },
    { id: 'vanilla', label: 'Vanilla JS', icon: 'Zap', color: 'yellow' }
  ];

  const exportFormats = [
    { id: 'zip', label: 'ZIP Archive', icon: 'Archive', description: 'Complete project files' },
    { id: 'npm', label: 'NPM Package', icon: 'Package', description: 'Ready for npm publish' },
    { id: 'github', label: 'GitHub Repo', icon: 'Github', description: 'Push to repository' },
    { id: 'codesandbox', label: 'CodeSandbox', icon: 'ExternalLink', description: 'Open in sandbox' },
    { id: 'clipboard', label: 'Clipboard', icon: 'Copy', description: 'Copy all code' }
  ];

  const integrationOptions = [
    { id: 'vscode', label: 'VS Code', icon: 'Code', description: 'Open in VS Code' },
    { id: 'figma', label: 'Figma Plugin', icon: 'Figma', description: 'Export to Figma' },
    { id: 'storybook', label: 'Storybook', icon: 'Book', description: 'Generate stories' },
    { id: 'notion', label: 'Notion Page', icon: 'FileText', description: 'Create documentation' }
  ];

  const handleFormatSelect = (formatId) => {
    onFormatChange?.(formatId);
  };

  const handleExportOptionChange = (option, value) => {
    setExportOptions(prev => ({
      ...prev,
      [option]: value
    }));
  };

  const handleExport = async (exportType) => {
    setIsExporting(true);
    
    try {
      const exportData = {
        format: activeFormat,
        code: generatedCode,
        options: exportOptions,
        timestamp: new Date().toISOString()
      };

      switch (exportType) {
        case 'zip':
          await downloadZipArchive(exportData);
          break;
        case 'npm':
          await generateNpmPackage(exportData);
          break;
        case 'github':
          await pushToGitHub(exportData);
          break;
        case 'codesandbox':
          await openInCodeSandbox(exportData);
          break;
        case 'clipboard':
          await copyToClipboard(exportData);
          break;
        default:
          console.log('Export type not implemented:', exportType);
      }

      onExport?.(exportType, exportData);
    } catch (error) {
      console.error('Export failed:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const downloadZipArchive = async (exportData) => {
    // Create a simple text file download for demo
    const content = Object.values(exportData.code || {}).join('\n\n=== Next File ===\n\n');
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `step-builder-pro-${exportData.format}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateNpmPackage = async (exportData) => {
    const packageJson = {
      name: `step-builder-generated-${Date.now()}`,
      version: '1.0.0',
      description: 'Generated by Step Builder Pro',
      main: 'index.js',
      scripts: {
        start: 'npm run dev',
        dev: 'vite',
        build: 'vite build'
      },
      devDependencies: {
        vite: '^4.0.0'
      }
    };

    const content = JSON.stringify(packageJson, null, 2);
    const blob = new Blob([content], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'package.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const pushToGitHub = async (exportData) => {
    // This would integrate with GitHub API
    alert('GitHub integration would be implemented here');
  };

  const openInCodeSandbox = async (exportData) => {
    // This would create a CodeSandbox
    alert('CodeSandbox integration would be implemented here');
  };

  const copyToClipboard = async (exportData) => {
    const content = Object.values(exportData.code || {}).join('\n\n');
    await navigator.clipboard.writeText(content);
  };

  const handleOptimize = () => {
    onOptimize?.(optimizationLevel, exportOptions);
  };

  return (
    <div className="bg-surface border border-border rounded-lg p-4 space-y-4">
      {/* Format Selection */}
      <div>
        <div className="flex items-center space-x-2 mb-3">
          <Icon name="Settings" size={16} className="text-text-secondary" />
          <span className="text-sm font-medium text-text-primary">Output Format</span>
        </div>
        <div className="flex flex-wrap gap-2">
          {formats.map((format) => (
            <button
              key={format.id}
              onClick={() => handleFormatSelect(format.id)}
              className={`flex items-center space-x-2 px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
                activeFormat === format.id
                  ? 'bg-primary-100 text-primary-700 border border-primary-200' :'bg-surface-50 text-text-secondary hover:text-text-primary hover:bg-surface-100 border border-transparent'
              }`}
            >
              <Icon name={format.icon} size={14} />
              <span>{format.label}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Export Options */}
      <div>
        <div className="flex items-center space-x-2 mb-3">
          <Icon name="Sliders" size={16} className="text-text-secondary" />
          <span className="text-sm font-medium text-text-primary">Export Options</span>
        </div>
        <div className="grid grid-cols-2 gap-3">
          {Object.entries(exportOptions).map(([key, value]) => (
            <label key={key} className="flex items-center space-x-2 cursor-pointer">
              <input
                type="checkbox"
                checked={value}
                onChange={(e) => handleExportOptionChange(key, e.target.checked)}
                className="w-4 h-4 text-primary-600 bg-surface border-border rounded focus:ring-primary-500 focus:ring-2"
              />
              <span className="text-sm text-text-secondary capitalize">
                {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
              </span>
            </label>
          ))}
        </div>
      </div>

      {/* Optimization Level */}
      <div>
        <div className="flex items-center space-x-2 mb-3">
          <Icon name="Zap" size={16} className="text-text-secondary" />
          <span className="text-sm font-medium text-text-primary">Optimization</span>
        </div>
        <div className="flex items-center space-x-4">
          <select
            value={optimizationLevel}
            onChange={(e) => setOptimizationLevel(e.target.value)}
            className="flex-1 px-3 py-2 text-sm border border-border rounded-md bg-surface text-text-primary focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          >
            <option value="none">No Optimization</option>
            <option value="basic">Basic</option>
            <option value="standard">Standard</option>
            <option value="aggressive">Aggressive</option>
          </select>
          <Button
            variant="secondary"
            size="sm"
            onClick={handleOptimize}
            iconName="Zap"
            iconSize={14}
          >
            Optimize
          </Button>
        </div>
      </div>

      {/* Export Actions */}
      <div>
        <div className="flex items-center space-x-2 mb-3">
          <Icon name="Download" size={16} className="text-text-secondary" />
          <span className="text-sm font-medium text-text-primary">Export & Download</span>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2">
          {exportFormats.map((format) => (
            <button
              key={format.id}
              onClick={() => handleExport(format.id)}
              disabled={isExporting}
              className="flex items-center space-x-2 p-3 text-left bg-surface-50 hover:bg-surface-100 border border-border rounded-md transition-colors duration-200 disabled:opacity-50"
            >
              <Icon name={format.icon} size={16} className="text-text-secondary flex-shrink-0" />
              <div className="flex-1 min-w-0">
                <div className="text-sm font-medium text-text-primary">{format.label}</div>
                <div className="text-xs text-text-muted truncate">{format.description}</div>
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* Integration Options */}
      <div>
        <div className="flex items-center space-x-2 mb-3">
          <Icon name="ExternalLink" size={16} className="text-text-secondary" />
          <span className="text-sm font-medium text-text-primary">Integrations</span>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
          {integrationOptions.map((integration) => (
            <button
              key={integration.id}
              onClick={() => handleExport(integration.id)}
              disabled={isExporting}
              className="flex items-center space-x-2 p-3 text-left bg-surface-50 hover:bg-surface-100 border border-border rounded-md transition-colors duration-200 disabled:opacity-50"
            >
              <Icon name={integration.icon} size={16} className="text-text-secondary flex-shrink-0" />
              <div className="flex-1 min-w-0">
                <div className="text-sm font-medium text-text-primary">{integration.label}</div>
                <div className="text-xs text-text-muted truncate">{integration.description}</div>
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* Quick Actions */}
      <div className="flex items-center justify-between pt-4 border-t border-border">
        <div className="flex items-center space-x-2">
          <div className="w-2 h-2 bg-success-500 rounded-full" />
          <span className="text-xs text-text-muted">Ready to export</span>
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleExport('clipboard')}
            iconName="Copy"
            iconSize={14}
          >
            Copy All
          </Button>
          <Button
            variant="primary"
            size="sm"
            onClick={() => handleExport('zip')}
            loading={isExporting}
            iconName="Download"
            iconSize={14}
          >
            Download
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ExportToolbar;